// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
  output        = "../node_modules/.prisma/client"
  engineType    = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER
  SUPPORT
  OWNER
  ADMIN
  MEMBER
}

enum RepositoryProvider {
  GITHUB
  GITLAB
  BITBUCKET
}

enum ScanStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

enum Plan {
  STARTER
  PRO
  BUSINESS
  ENTERPRISE
}

enum WorkspaceRole {
  ADMIN
  MEMBER
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String?
  firstName         String?           @map("first_name")
  lastName          String?           @map("last_name")
  provider          String?
  providerId        String?           @map("provider_id")
  role              String           @default("MEMBER") @map("user_role")
  orgName           String?           @map("org_name")
  plan              Plan              @default(STARTER)
  ownerId           String?           @map("owner_id")
  
  // MFA fields
  mfaSecret         String?           @map("mfa_secret")
  mfaEnabled        Boolean           @default(false) @map("mfa_enabled")
  
  // Authentication & Session
  sessions          Session[]
  trustedDevices    TrustedDevice[]
  oauthProviders    OAuthProvider[]
  passwordlessTokens PasswordlessToken[]
  
  // Authorization & Resources
  workspaces        Workspace[]       @relation("WorkspaceOwner")
  userWorkspaces    UserWorkspace[]
  userRoleAssignments UserRoleAssignment[]
  
  // Audit & Usage
  usageLogs         UsageLog[]
  auditLogs         AuditLog[]
  
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("users")
}

// Authorization Models
model Permission {
  id                String            @id @default(uuid())
  code              String            @unique   // e.g., "SCAN:CREATE"
  name              String
  description       String?
  scope             String            // "GLOBAL", "WORKSPACE", "SCAN", "REPORT"
  action            String            // "CREATE", "READ", "UPDATE", "DELETE" 
  resource          String            // "SCAN", "REPORT", "WORKSPACE", etc.
  
  rolePermissions   RolePermission[]
  
  createdAt         DateTime          @default(now()) @map("created_at")

  @@map("permissions")
}

model Role {
  id                String            @id @default(uuid())
  name              String            @unique  // "Viewer", "Editor", "Admin"
  description       String?
  isDefault         Boolean           @default(false) @map("is_default")
  
  rolePermissions   RolePermission[]
  userRoleAssignments UserRoleAssignment[]
  
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("roles")
}

model RolePermission {
  roleId            String            @map("role_id")
  permissionId      String            @map("permission_id")
  
  role              Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission        Permission        @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRoleAssignment {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  roleId            String            @map("role_id")
  workspaceId       String?           @map("workspace_id")
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  role              Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  workspace         Workspace?        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime          @default(now()) @map("created_at")

  @@unique([userId, roleId, workspaceId])
  @@map("user_roles")
}

// Authentication & Session Models
model Session {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  token             String            @unique // JWT ID
  ipAddress         String?           @map("ip_address")
  userAgent         String?           @map("user_agent")
  deviceFingerprint String?           @map("device_fingerprint")
  lastActive        DateTime          @default(now()) @map("last_active")
  expiresAt         DateTime          @map("expires_at")
  isRevoked         Boolean           @default(false) @map("is_revoked")
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime          @default(now()) @map("created_at")

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model PasswordlessToken {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  token             String            @unique
  ipAddress         String?           @map("ip_address")
  expiresAt         DateTime          @map("expires_at")
  isUsed            Boolean           @default(false) @map("is_used")
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime          @default(now()) @map("created_at")

  @@index([token])
  @@index([userId])
  @@map("passwordless_tokens")
}

model TrustedDevice {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  fingerprint       String
  name              String?
  ipAddress         String?           @map("ip_address")
  lastUsed          DateTime          @default(now()) @map("last_used")
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime          @default(now()) @map("created_at")

  @@unique([userId, fingerprint])
  @@index([fingerprint])
  @@map("trusted_devices")
}

model OAuthProvider {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  provider          String            // "google", "github", etc.
  providerId        String            @map("provider_id") // ID from the provider
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime          @default(now()) @map("created_at")

  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@map("oauth_providers")
}

// Usage & Auditing
model UsageLog {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  resourceType      String            @map("resource_type") // "SCAN", "REPORT", etc.
  action            String            // "CREATE", "READ", etc.
  count             Int               @default(1)
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime          @default(now()) @map("created_at")

  @@index([userId, resourceType, createdAt])
  @@map("usage_logs")
}

// Existing Models
model Workspace {
  id             String          @id @default(uuid())
  name           String
  ownerId        String          @map("owner_id")
  owner          User            @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  repositoryId   String?         @map("repository_id")
  repository     Repository?     @relation(fields: [repositoryId], references: [id])
  userWorkspaces UserWorkspace[]
  userRoleAssignments UserRoleAssignment[]
  scans          Scan[]
  schedules      Schedule[]
  auditLogs      AuditLog[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@map("workspaces")
}

model UserWorkspace {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  workspaceId String        @map("workspace_id")
  role        WorkspaceRole
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

model Repository {
  id          String             @id @default(uuid())
  url         String
  provider    RepositoryProvider
  accessToken String             @map("access_token")
  ownerId     String             @map("owner_id")
  workspaces  Workspace[]
  scans       Scan[]
  schedules   Schedule[]
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  @@map("repositories")
}

model Scan {
  id             String     @id @default(uuid())
  repositoryId   String     @map("repository_id")
  repository     Repository @relation(fields: [repositoryId], references: [id])
  workspaceId    String     @map("workspace_id")
  workspace      Workspace  @relation(fields: [workspaceId], references: [id])
  branch         String
  status         ScanStatus
  results        Json?
  historical     Boolean    @default(false)
  fileExclusions String[]   @map("file_exclusions")
  createdAt      DateTime   @default(now()) @map("created_at")
  completedAt    DateTime?  @map("completed_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("scans")
}

model Schedule {
  id             String     @id @default(uuid())
  repositoryId   String     @map("repository_id")
  repository     Repository @relation(fields: [repositoryId], references: [id])
  workspaceId    String     @map("workspace_id")
  workspace      Workspace  @relation(fields: [workspaceId], references: [id])
  branch         String
  cronExpression String
  historical     Boolean    @default(false)
  fileExclusions String[]   @map("file_exclusions")
  active         Boolean    @default(true)
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("schedules")
}

model AuditLog {
  id          String     @id @default(uuid())
  userId      String     @map("user_id")
  user        User       @relation(fields: [userId], references: [id])
  workspaceId String?    @map("workspace_id")
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  action      String
  details     Json
  timestamp   DateTime   @default(now())
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@map("audit_logs")
}
